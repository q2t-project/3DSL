// auto-generated by Codex Directive 04 â€” Schema Adapter
const REF_PREFIX = "#/$defs/";

function clone(value, cache = new WeakMap()) {
  if (value === null || typeof value !== "object") {
    return value;
  }

  if (cache.has(value)) {
    return cache.get(value);
  }

  if (Array.isArray(value)) {
    const result = value.map((item) => clone(item, cache));
    cache.set(value, result);
    return result;
  }

  const result = {};
  cache.set(value, result);
  Object.keys(value).forEach((key) => {
    result[key] = clone(value[key], cache);
  });
  return result;
}

function resolveRef(ref, definitions) {
  if (typeof ref !== "string" || !ref.startsWith(REF_PREFIX)) {
    return undefined;
  }

  const path = ref.substring(REF_PREFIX.length);
  return definitions[path];
}

function expandNode(node, definitions, stack = []) {
  if (!node || typeof node !== "object") {
    return node;
  }

  if (Array.isArray(node)) {
    return node.map((item) => expandNode(item, definitions, stack));
  }

  if (typeof node.$ref === "string") {
    const target = resolveRef(node.$ref, definitions);
    if (!target) {
      return node;
    }

    const definitionKey = node.$ref.substring(REF_PREFIX.length);
    if (stack.includes(definitionKey)) {
      return { ...node, circular: true };
    }

    return expandNode(target, definitions, [...stack, definitionKey]);
  }

  return Object.entries(node).reduce((acc, [key, value]) => {
    acc[key] = expandNode(value, definitions, stack);
    return acc;
  }, {});
}

export class SchemaAdapter {
  constructor(schema) {
    this.rawSchema = schema ? clone(schema) : null;
    this.definitions = this.rawSchema?.$defs ? { ...this.rawSchema.$defs } : {};
  }

  withSchema(schema) {
    return new SchemaAdapter(schema);
  }

  getDefinition(key) {
    return clone(this.definitions[key]);
  }

  listDefinitions() {
    return Object.keys(this.definitions);
  }

  expand(schema = this.rawSchema) {
    if (!schema) {
      return null;
    }

    const targetSchema = clone(schema);
    const definitions = targetSchema.$defs ? { ...targetSchema.$defs } : this.definitions;
    return expandNode(targetSchema, definitions);
  }

  prepareForAjv(schema = this.rawSchema) {
    const expanded = this.expand(schema);
    if (!expanded) {
      return null;
    }

    return {
      ...expanded,
      $defs: this.definitions,
    };
  }
}

export const createSchemaAdapter = (schema) => new SchemaAdapter(schema);
