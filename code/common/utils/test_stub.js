// auto-generated by Codex Directive 13 â€” SelfTest Stub
import { Logger } from "./logger.js";
import { ValidationResult } from "../validation_result.js";
import { loadEnvironment } from "../constants/env.js";

export class SharedSpecSelfTest {
  constructor(options = {}) {
    this.logger = options.logger ?? new Logger("selftest");
    this.checks = [];
  }

  registerCheck(name, handler) {
    if (typeof handler === "function") {
      this.checks.push({ name, handler });
    }
  }

  async run(context = {}) {
    const environment = context.environment ?? loadEnvironment();
    this.logger.info("SELFTEST_START", { checkCount: this.checks.length, environment });

    const results = [];
    for (const { name, handler } of this.checks) {
      try {
        const outcome = await handler({ environment, logger: this.logger });
        const result = outcome instanceof ValidationResult ? outcome : ValidationResult.ok({ detail: outcome });
        results.push({ name, result });
        this.logger.info("CHECK_OK", { name, warnings: result.warnings.length });
      } catch (error) {
        const failure = ValidationResult.error(
          [{ message: error.message, stack: error.stack }],
          { check: name },
        );
        results.push({ name, result: failure });
        this.logger.error("CHECK_FAIL", failure);
      }
    }

    const merged = results.reduce((acc, { result }) => acc.merge(result), ValidationResult.ok({ checks: results.length }));
    this.logger.info("SELFTEST_COMPLETE", { valid: merged.valid, errors: merged.errors.length });
    return { environment, results, summary: merged };
  }
}

export const createSharedSpecSelfTest = (options) => new SharedSpecSelfTest(options);
