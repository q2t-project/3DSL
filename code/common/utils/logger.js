// auto-generated by Codex Directive 02 â€” Logger Module
const STATUS_OK = "OK";
const STATUS_WARN = "WARN";
const STATUS_ERROR = "ERROR";

const DEFAULT_EVENT = "GENERAL";

function pad(number) {
  return number.toString().padStart(2, "0");
}

function formatTimestamp(date = new Date()) {
  const year = date.getFullYear();
  const month = pad(date.getMonth() + 1);
  const day = pad(date.getDate());
  const hours = pad(date.getHours());
  const minutes = pad(date.getMinutes());
  const seconds = pad(date.getSeconds());
  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}

function normalizeStatus(status) {
  const normalized = (status || STATUS_OK).toString().toUpperCase();
  if ([STATUS_OK, STATUS_WARN, STATUS_ERROR].includes(normalized)) {
    return normalized;
  }
  return STATUS_OK;
}

export class Logger {
  constructor(moduleName, options = {}) {
    this.moduleName = moduleName || "core";
    this.transport = options.transport ?? console;
    this.historyLimit = options.historyLimit ?? 256;
    this.entries = [];
  }

  format(eventName, status, payload) {
    const timestamp = formatTimestamp();
    const event = eventName ? eventName.toUpperCase() : DEFAULT_EVENT;
    const normalizedStatus = normalizeStatus(status);
    const base = `[${timestamp}] [${this.moduleName}] EVENT:${event} STATUS:${normalizedStatus}`;

    if (!payload) {
      return base;
    }

    if (typeof payload === "string") {
      return `${base} ${payload}`;
    }

    return `${base} ${JSON.stringify(payload)}`;
  }

  pushHistory(entry) {
    this.entries.push(entry);
    if (this.entries.length > this.historyLimit) {
      this.entries.splice(0, this.entries.length - this.historyLimit);
    }
  }

  log(eventName, status = STATUS_OK, payload) {
    const message = this.format(eventName, status, payload);
    this.pushHistory({ message, eventName, status: normalizeStatus(status), payload, timestamp: new Date() });

    if (typeof this.transport?.log === "function") {
      this.transport.log(message);
    }

    return message;
  }

  info(eventName, payload) {
    return this.log(eventName, STATUS_OK, payload);
  }

  warn(eventName, payload) {
    const message = this.format(eventName, STATUS_WARN, payload);
    this.pushHistory({ message, eventName, status: STATUS_WARN, payload, timestamp: new Date() });
    if (typeof this.transport?.warn === "function") {
      this.transport.warn(message);
    } else {
      this.transport?.log?.(message);
    }
    return message;
  }

  error(eventName, error) {
    const payload = error instanceof Error ? { message: error.message, stack: error.stack } : error;
    const message = this.format(eventName, STATUS_ERROR, payload);
    this.pushHistory({ message, eventName, status: STATUS_ERROR, payload, timestamp: new Date() });
    if (typeof this.transport?.error === "function") {
      this.transport.error(message);
    } else {
      this.transport?.log?.(message);
    }
    return message;
  }

  getHistory() {
    return [...this.entries];
  }

  clearHistory() {
    this.entries.length = 0;
  }
}

export const createLogger = (moduleName, options) => new Logger(moduleName, options);
export const LoggerStatus = { OK: STATUS_OK, WARN: STATUS_WARN, ERROR: STATUS_ERROR };
