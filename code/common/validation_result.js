// auto-generated by Codex Directive 05 â€” Validation Result
export class ValidationResult {
  constructor({ valid, errors = [], warnings = [], meta = {} }) {
    this.valid = Boolean(valid);
    this.errors = Array.isArray(errors) ? errors : [errors].filter(Boolean);
    this.warnings = Array.isArray(warnings) ? warnings : [warnings].filter(Boolean);
    this.meta = meta;
  }

  static ok(meta = {}) {
    return new ValidationResult({ valid: true, errors: [], warnings: [], meta });
  }

  static warn(warnings, meta = {}) {
    return new ValidationResult({ valid: true, warnings, errors: [], meta });
  }

  static error(errors, meta = {}) {
    return new ValidationResult({ valid: false, errors, warnings: [], meta });
  }

  static fromAjv({ valid, errors }) {
    return new ValidationResult({
      valid,
      errors: valid ? [] : (errors || []).map((error) => ({
        keyword: error.keyword,
        instancePath: error.instancePath,
        schemaPath: error.schemaPath,
        params: error.params,
        message: error.message,
      })),
    });
  }

  merge(other) {
    if (!(other instanceof ValidationResult)) {
      return new ValidationResult({
        valid: this.valid,
        errors: [...this.errors],
        warnings: [...this.warnings],
        meta: { ...this.meta },
      });
    }

    return new ValidationResult({
      valid: this.valid && other.valid,
      errors: [...this.errors, ...other.errors],
      warnings: [...this.warnings, ...other.warnings],
      meta: { ...this.meta, ...other.meta },
    });
  }

  toJSON() {
    return {
      valid: this.valid,
      errors: this.errors,
      warnings: this.warnings,
      meta: this.meta,
    };
  }
}

export const createValidationResult = (payload) => new ValidationResult(payload);
